logging:
  level:
    root: info
    me:
      sonam: info
info:
  app:
    name: Springboot me.sonam.account.Application
    description: This is a Springboot application
    version: 1.0.0

management:
  endpoint:
    health:
      show-details: always

server:
    port: 8080

spring:
  profiles:
    active: localdevtest
  r2dbc:
    url: r2dbc:h2:mem:///contentitem?options=DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
    name: sa
    password:
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: http://localhost:9001

POSTGRES_USERNAME: dusername
POSTGRES_DBNAME: dbname
POSTGRES_SERVICE: dservice
POSTGRES_PASSWORD: dpassword

user-rest-service:
  root: http://localhost:{port}
  signup: /signup

# this is used for getting accesstoken by header filter in jwt-validator (ReactiveRequestContextHolder.class)
auth-server:
  root: http://localhost:9001
  contextPath: /issuer
  clients: /clients
  clientOrganizations: /clients
  authenticate: /authenticate
  oauth2token:
    path: /oauth2/token
    grantType: client_credentials

authentication-rest-service:
  root: http://localhost:{port}/authentications
  authenticate: /authenticate

organization-rest-service:
  root: http://localhost:{port}
  contextPath: /organizations

role-rest-service:
  root: http://localhost:{port}
  contextPath: /roles

endpoint:
  user:
    signup: "/public/user/signup"
    update: "/user"
    getbyauthId: "/user/{authid}"
    matchingnames: "/user/names/{firstname}/{lastname}"
    profilephoto: "/user/profilephoto"

EUREKA_USER: test
EUREKA_PASSWORD: test

eureka:
  client:
    enabled: false
    serviceUrl:
      defaultZone: https://${EUREKA_USER}:${EUREKA_PASSWORD}@discovery-service.sonam.cloud/eureka

permitpath:
  - path: /authzmanager/api/health/*
    httpMethods: GET

jwtrequest:
  - in:  /*
    out: /authenticate
    accessToken:
      option: request
      scopes: message.read message.write
      base64EncodedClientIdSecret: b2F1dGgtY2xpZW50Om9hdXRoLXNlY3JldA==
  - in:  /*
    out: /clients
    accessToken:
      option: request
      scopes: message.read message.write
      base64EncodedClientIdSecret: b2F1dGgtY2xpZW50Om9hdXRoLXNlY3JldA==
  - in:  /*
    out: /users,/users/id/(.)*,/users/(.)*,
        /issuer/clients, /issuer/clients/(.)*,
        /issuer/clientOrganizations/clients/id/(.)*/organizations/id, /issuer/clientOrganizations,
        /issuer/clientOrganizations/clientId/(.)*/organizationId/(.)*, /issuer/clientOrganizations/findRow,
        /issuer/clientOrganizations/id/(.)*/organizationId/(.)*, /organizations, /organizations/(.)*,
        /organizations/(.)*/users/(.)*, /roles, /roles/organizations/(.)*, /roles/(.)*
    accessToken:
      option: request
      scopes: message.read message.write
      base64EncodedClientIdSecret: b2F1dGgtY2xpZW50Om9hdXRoLXNlY3JldA==

allowedOrigins: http://api-gateway, 10.0.0.28, localhost, 127.0.0.1, api-gateway, 10.0.0.28:8080, 127.0.0.1
