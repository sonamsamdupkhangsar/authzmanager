server:
  port: ${SERVER_PORT}

logging:
  level:
    root: warn
    me.sonam: debug
    me.sonam.authzmanager.tokenfilter: debug

spring:
  main:
    allow-bean-definition-overriding: true
  application:
    name: authzmanager
  mvc:
    hiddenmethod:
      filter:
        enabled: true
  thymeleaf: # to enable hot reload of Thymeleaf templates
    cache: false
  security:
    oauth2:
#      resourceserver:
#        jwt:
#          issuer-uri: ${ISSUER_URI}

      client:
        registration:
          b4dfe3fb-1692-44b8-92ab-366ccc84b539-authzmanager:
            client-id: b4dfe3fb-1692-44b8-92ab-366ccc84b539-authzmanager
            client-secret: ${AUTHZMANAGER_INITIAL_SECRET}
            client-authentication-method: client_secret_basic
            authorization-grant-type: authorization_code
            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"
            #client-name: b4dfe3fb-1692-44b8-92ab-366ccc84b539-authzmanager
            #client-authentication-method: client_secret_basic
            scope:
              - openid
              - profile
        provider:
          b4dfe3fb-1692-44b8-92ab-366ccc84b539-authzmanager:
            authorization-uri: ${ISSUER_URI}/oauth2/authorize
            token-uri: ${ISSUER_URI}/oauth2/token
            user-info-uri: ${ISSUER_URI}/userinfo
            jwk-set-uri: ${ISSUER_URI}/oauth2/jwks
            userNameAttribute: sub


permitpath:
  - path: /authzmanager/api/health/*

requestFilters:

# this is used for getting accesstoken by header filter in jwt-validator (ReactiveRequestContextHolder.class)
auth-server:
  root: ${AUTH_SERVER}
  contextPath: /issuer
  clients: /clients
  clientOrganizations: /clients
  authenticate: /authenticate
  oauth2token:
    path: /oauth2/token
    grantType: client_credentials

user-rest-service:
  root: ${USER_REST_SERVICE}
  context: /users
  photo: /photo

authentication-rest-service:
  root: ${AUTHENTICATION_REST_SERVICE}/authentications
  authenticate: /authenticate

organization-rest-service:
  root: ${ORGANIZATION_REST_SERVICE}
  contextPath: /organizations

role-rest-service:
  root: ${ROLE_REST_SERVICE}
  contextPath: /roles

account-rest-service:
  root: ${ACCOUNT_REST_SERVICE}
  context: ${account-rest-service.root}/accounts
  accountDelete: ${account-rest-service.context}/delete

allowedOrigins: ${allowedOrigins}

oauthClientId: authzmanager-client

issuerUri: ${ISSUER_URI}

aws:
  s3:
    region: ${REGION}
    accessKeyId: ${ACCESS_KEY_ID}
    secretAccessKey: ${SECRET_ACCESS_KEY}
    bucket: sonam
    endpoint: ${ENDPOINT}
    subdomain: ${SUBDOMAIN}
    rootPath: authzmanager/
    videoPath: videos/
    photoPath: photos/
    filePath: files/
    imageAclHeader: x-amz-acl
    imageAclValue: public-read
    presignDurationInMinutes: 60
    thumbnailSize:
      width: 200
      height: 200

profilePhotoFolder: profile/