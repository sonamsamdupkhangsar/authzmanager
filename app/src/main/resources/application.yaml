server:
  port: ${SERVER_PORT}

logging:
  level:
    root: warn
    me.sonam: debug
    me.sonam.authzmanager.tokenfilter: debug

spring:
  main:
    allow-bean-definition-overriding: true
  application:
    name: authzmanager
  mvc:
    hiddenmethod:
      filter:
        enabled: true
  thymeleaf: # to enable hot reload of Thymeleaf templates
    cache: false
  security:
    oauth2:
#      resourceserver:
#        jwt:
#          issuer-uri: ${ISSUER_URI}

#      client:
#        registration:
#          b4dfe3fb-1692-44b8-92ab-366ccc84b539-authzmanager:
#            client-id: b4dfe3fb-1692-44b8-92ab-366ccc84b539-authzmanager
#            client-secret: hello
#            client-authentication-method: client_secret_basic
#            authorization-grant-type: authorization_code
#            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"
#            #client-name: b4dfe3fb-1692-44b8-92ab-366ccc84b539-authzmanager
#            #client-authentication-method: client_secret_basic
#            scope:
#              - openid
#              - profile
#        provider:
#          b4dfe3fb-1692-44b8-92ab-366ccc84b539-authzmanager:
#            #authorization-uri: http://api-gateway:8087/oauth2-token-mediator/authorize
#            #token-uri: http://api-gateway:8087/oauth2-token-mediator/token
#            authorization-uri: http://api-gateway:9001/issuer/oauth2/authorize
#            token-uri: http://api-gateway:9001/issuer/oauth2/token
#            user-info-uri: http://api-gateway:9001/issuer/userinfo
#            jwk-set-uri: http://api-gateway:9001/issuer/oauth2/jwks
#            userNameAttribute: sub

permitpath:
  - path: /authzmanager/api/health/*

jwtrequest:
  - in:  /*
    out: /issuer/authenticate
    accessToken:
      option: request
      scopes: ${REQUEST_SCOPES}
      base64EncodedClientIdSecret: ${BASE64_CLIENT_ID_SECRET}
  - in:  /*
    out: /organizations
    accessToken:
      option: request
      scopes: ${REQUEST_SCOPES}
      base64EncodedClientIdSecret: ${BASE64_CLIENT_ID_SECRET}
  - in:  /*
    out: /users,/users/id/(.)*,/users/(.)*,/issuer/clients/(.)*,
        /issuer/clients,/issuer/clientOrganizations/clients/id/(.)*/organizations/id,
        /issuer/clientOrganizations,/issuer/clientOrganizations/clientId/(.)*/organizationId/(.)*,
        /issuer/clientOrganizations/findRow,/issuer/clientOrganizations/id/(.)*/organizationId/(.)*,
        /organizations,/organizations/(.)*,/organizations/(.)*/users/(.)*,/roles,/roles/organizations/(.)*,
        /roles/(.)*, /roles/organizations/(.)*
    accessToken:
      option: request
      scopes: ${REQUEST_SCOPES}
      base64EncodedClientIdSecret: ${BASE64_CLIENT_ID_SECRET}


user-rest-service:
  root: ${USER_REST_SERVICE}
  contextPath: /users

# this is used for getting accesstoken by header filter in jwt-validator (ReactiveRequestContextHolder.class)
auth-server:
  root: ${AUTH_SERVER}
  contextPath: /issuer
  clients: /clients
  clientOrganizations: /clients
  authenticate: /authenticate
  oauth2token:
    path: /oauth2/token
    grantType: client_credentials

authentication-rest-service:
  root: ${AUTHENTICATION_REST_SERVICE}/authentications
  authenticate: /authenticate

organization-rest-service:
  root: ${ORGANIZATION_REST_SERVICE}
  contextPath: /organizations

role-rest-service:
  root: ${ROLE_REST_SERVICE}
  contextPath: /roles


allowedOrigins: ${allowedOrigins}

oauthClientId: authzmanager-client

issuerUri: ${ISSUER_URI}